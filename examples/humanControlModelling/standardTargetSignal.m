function ft = standardTargetSignal(name,model,varargin)

p = inputParser;
p.CaseSensitive = true;
p.addParameter('Kt',[]);
p.parse(varargin{:});
z = p.Results;
% A list of standard target signals for easy inclusion

endsAtZero  = true;

switch name
    case 'none'
        ft  = z.Kt * zeros(size(model.measurementTime));
    case 'drop2011b' % The exact target signal from the first journal paper.
        ft = z.Kt * targetSignals2('drop2011b',model,'gain',1/5);
    case 'nieuwenhuizen2008'
        ft = z.Kt * targetSignals2('nieuwenhuizen2008',model,'gain',0.01);
    case 'step'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cs cscs cscs cscs c',...
                       'sTime',[3 3.74  5 7.5  5 7.5  5 7.5  5 7.5  5  7.5 5 3.74 2],...
                       'sGain',[0 1     0 -2   0 2    0 -2   0 2    0 -2   0 1     0],...
                       'gain',1);
    case 'parabola'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp c',...
                       'sTime',[3 3.74  5 7.5  5 7.5  5 7.5  5 7.5  5  7.5 5 3.74 2],...
                       'sGain',[0 1     0 -2   0 2    0 -2   0 2    0 -2   0 1     0],...
                       'gain',1);
    case 'sdt parabola'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp c',...
                       'sTime',[3 3.74  5 7.5  5 7.5  5 7.5  5 7.5  5  7.5 5 3.74 2],...
                       'sGain',[0 1     0 -2   0 2    0 -2   0 2    0 -2   0 1     0],...
                       'gain',1);
	case 'single parabola'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpc',...
                       'sTime',[4 5  5 5  5 ],...
                       'sGain',[0 1  0 -1 0],...
                       'gain',1);
	case 'single ramp'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cr crc',...
                       'sTime',[4 5  5 5  5 ],...
                       'sGain',[0 1  0 -1 0],...
                       'gain',1);
	case 'motion parabola'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c   p     c   p    c   p    c   p    c  p    c   p    c   p    c    p   c   ',...
                       'sTime',[3.5 3.74  2.5 7.5  2.5 7.5  2.5 3.74 12 3.74 2.5 7.5  2.5 7.5  2.5  7.5 3 ],...
                       'sGain',[0   1     0   -2   0   2    0   -1   0  -1   0   2    0   -2   0    1   0   ],...
                       'gain',1);
    case 'motion ramp'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c   r     c   r    c   r    c   r    c  r    c   r    c   r    c    r   c   ',...
                       'sTime',[3.5 3.74  2.5 7.5  2.5 7.5  2.5 3.74 12 3.74 2.5 7.5  2.5 7.5  2.5  7.5 3 ],...
                       'sGain',[0   1     0   -2   0   2    0   -1   0  -1   0   2    0   -2   0    1   0   ],...
                       'gain',1);
	case 'motion parabola slow'
        t_c     = 4;
        t_p_s   = 5;
        t_p_l   = 15;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    p      c    p      c    p      c    p      c    p      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    1      0],...
                       'gain',1);
    case 'motion ramp slow'
        t_c     = 4;
        t_p_s   = 5;
        t_p_l   = 15;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c    r      c    r      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    1      0],...
                       'gain',1);
	case 'simona motion ramp'
        t_c     = 1;
        t_p_l   = 8;
        t_p_s   = t_p_l/2;
        t_w     = 8;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c    r      c    r      c    r      c',...
                       'sTime',[t_c  t_p_s  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_s  t_c],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    2      0    -1      0],...
                       'gain',1);
                   
%                    sum([t_c  t_p_s  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_s  t_c])
                   
	case 'simona motion ramp vrijdag'
        t_c     = 5;
        t_p_l   = 6;
        t_p_s   = t_p_l/2;
        t_w     = 8;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c    r      c    r      c    r      c',...
                       'sTime',[t_c  t_p_s  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_s  t_c],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    2      0    -1      0],...
                       'gain',1);
                   
%                    sum([t_c  t_p_s  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_s  t_c])
                   
	case 'simona motion parabola'
        t_c     = 1;
        t_p_l   = 8;
        t_p_s   = t_p_l/2;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    p      c    p      c    p      c    p      c    p      c',...
                       'sTime',[t_c  t_p_s  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_s  t_c],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    1      0],...
                       'gain',1);
                   
%                    sum([t_c  t_p_s  t_w  t_p_l  t_w  t_p_l  t_w  t_p_l  t_w  t_p_s  t_c])
                   
	case 'motion parabola super slow'
        t_c     = 4;
        t_p_s   = 20;
        t_p_l   = 25;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    p      c    p      c    p      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    1      0],...
                       'gain',1);
                   
    case 'motion ramp super slow'
        t_c     = 4;
        t_p_s   = 20;
        t_p_l   = 25;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    1      0],...
                       'gain',1);
	case 'motion parabola long super slow'
        t_c     = 4;
        t_p_s   = 20;
        t_p_l   = 30;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    p      c    p      c    p      c    p      c    p      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    1      0],...
                       'gain',1);
	case 'motion ramp long super slow'
        t_c     = 4;
        t_p_s   = 20;
        t_p_l   = 30;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c    r      c    r      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    1      0],...
                       'gain',1);
	case 'motion parabola long slow'
        t_c     = 4;
        t_p_s   = 10;
        t_p_l   = 15;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p      c   p      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_w  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0   1      0],...
                       'gain',1);
	case 'motion ramp long slow'
        t_c     = 4;
        t_p_s   = 10;
        t_p_l   = 15;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r      c   r      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_w  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0   1      0],...
                       'gain',1);
	case 'motion parabola long'
        t_c     = 4;
        t_p_s   = 5;
        t_p_l   = 7.5;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p      c    p     c    p      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_w  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_w  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0    2     0    -1     0],...
                       'gain',1);
	case 'motion ramp long'
        t_c     = 4;
        t_p_s   = 5;
        t_p_l   = 7.5;
        t_w     = 4;
        
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r      c    r     c    r      c',...
                       'sTime',[t_c  t_p_s  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_w  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_w  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l  t_c  t_p_l t_c  t_p_s  t_w],...
                       'sGain',[0    1      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0    2      0    -2     0    2     0    -1     0],...
                       'gain',1);

    case 'sdt ramp'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cr crcr crcr crcr c',...
                       'sTime',[3 7.5/2  5 7.5  5 7.5  5 7.5  5 7.5  5  7.5 5 7.5/2 2],...
                       'sGain',[0 1      0 -2   0 2    0 -2   0 2    0 -2   0 1     0],...
                       'gain',1);
	case 'ramp'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cr crcr crcr crcr c',...
                       'sTime',[3 7.5/2  5 7.5  5 7.5  5 7.5  5 7.5  5  7.5 5 7.5/2 2],...
                       'sGain',[0 1      0 -2   0 2    0 -2   0 2    0 -2   0 1     0],...
                       'gain',1);
    case 'classicPar' % 'Classic' shape (as in JP 1) but with parabolas
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cpcpcpcpc',...
                       'sTime',[15 5 5 10 5 10 5 5 5],...
                       'sGain',[0 1 0 -2 0 2 0 -1 0],...
                       'gain',1);
	case 'classicCosineBell' % 'Classic' shape (as in JP 1) but with cosine bells
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cbcbcbcbc',...
                       'sTime',[15 5 5 10 5 10 5 5 5],...
                       'sGain',[0 1 0 -2 0 2 0 -1 0],...
                       'gain',1);
    case 'classicConstantStickDeflectionPar'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cpcpcpcpc',...
                       'sTime',[15 5 5 7.08 5 7.08 5 5 5],...
                       'sGain',[0 1 0 -2 0 2 0 -1 0],...
                       'gain',1);
	case 'longSlowParabola'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cpcpcpc',...
                       'sTime',[5 5 5 40 5 5 5],...
                       'sGain',[0 1 0 -2 0 1 0],...
                       'gain',1);
	case 'manyShortParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp cpcp cpc',...
                       'sTime',[2 5  3 5  3 5  3 5  3 5  3 5  3 5  3 5  3 5  3 5 2],...
                       'sGain',[0 1  0 -2 0 2  0 -2 0 2  0 -2 0 2  0 -2 0 2  0 -1 0],...
                       'gain',1);
	case 'manyParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp cpc',...
                       'sTime',[2 5  3 3  3 3   3 8  3 8   3 12 3 12  3 5  2],...
                       'sGain',[0 1  0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -1 0],...
                       'gain',1);
	case 'single P 8s' % Actually this target signal is not what the name suggests, because it has to end with ft = 0...
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','cpcpc',...
                            'sTime',[3 8 6 8  3],...
                            'sGain',[0 1 0 -1 0],...
                            'gain',1);
	case 'double P 8s'
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','cpcpc',...
                            'sTime',[3 8 6 8  3],...
                            'sGain',[0 1 0 -1 0],...
                            'gain',1);
	case 'single P 5s' % Actually this target signal is not what the name suggests, because it has to end with ft = 0...
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','cpcpc',...
                            'sTime',[3 5 6 5  3],...
                            'sGain',[0 1 0 -1 0],...
                            'gain',1);
	case 'double P 5s'
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','cpcpc',...
                            'sTime',[3 5 6 5  3],...
                            'sGain',[0 1 0 -1 0],...
                            'gain',1);
	case 'four P 5s'
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','c p c p  c p c p c',...
                            'sTime',[2 5 2 5  2 5 2 5 2],...
                            'sGain',[0 1 0 -1 0 -1 0 1 0],...
                            'gain',1);
	case 'four P 5s double amplitude'
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','c p c p  c p c p c',...
                            'sTime',[2 5 2 5  2 5 2 5 2],...
                            'sGain',[0 1 0 -2 0 2 0 -1 0],...
                            'gain',1);
	case 'six P 5s double amplitude'
        ft = z.Kt * targetSignals2('sequence',model,...
                            'sName','c p c p  c p c  p c p c p  c',...
                            'sTime',[2 5 2 5  2 5 2  5 2 5 2 5  2],...
                            'sGain',[0 1 0 -2 0 2 0 -2 0 2 0 -1 0],...
                            'gain',1);
	case '4 P 10s'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpc',...
                       'sTime',[2 5  3 7.08 3 7.08  3 5 2],...
                       'sGain',[0 1  0 -2   0 2     0 -1 0],...
                       'gain',1);
	case '2 ShortParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpc',...
                       'sTime',[2 5  3 5  3 5  3 5 2],...
                       'sGain',[0 1  0 -2 0 2  0 -1 0],...
                       'gain',1);
	case '4 ShortParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpc',...
                       'sTime',[2 5  3 5  3 5  3 5  3 5  3 5 2],...
                       'sGain',[0 1  0 -2 0 2  0 -2 0 2  0 -1 0],...
                       'gain',1);
	case '8 ShortParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp cpcp cpc',...
                       'sTime',[2 5  3 5  3 5  3 5  3 5  3 5  3 5  3 5  3 5  3 5 2],...
                       'sGain',[0 1  0 -2 0 2  0 -2 0 2  0 -2 0 2  0 -2 0 2  0 -1 0],...
                       'gain',1);
	case '16 ShortParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpc',...
                       'sTime',[2 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5  3 5 2],...
                       'sGain',[0 1   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2  0 -1 0],...
                       'gain',1);
	case '24 ShortParabolas'
        ft = z.Kt * targetSignals2('sequence',model,...
                       'sName','cp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpcp cpc',...
                       'sTime',[2 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5   3 5  3 5  3 5 2],...
                       'sGain',[0 1   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2   0 -2 0 2  0 -1 0],...
                       'gain',1);
    case 'ahs lateral old'
        phi_accelbank       = 25;
        t_accelbank         = 2;    % s
        t_holdbank          = 0.88;
        t_V_target          = 5;    % s

        dt = 0.001;
        model.setMeasurementTimeVector((0:55000)*dt);

        ft_roll = targetSignals2('sequence',model,...
                                 'sName','crcrcrcrcrcrcrcrc',...
                                 'sTime',[10 t_accelbank      t_holdbank  t_accelbank t_V_target    t_accelbank     t_holdbank      t_accelbank      10 ...
                                             t_accelbank      t_holdbank  t_accelbank t_V_target    t_accelbank     t_holdbank      t_accelbank      10],...
                                 'sGain',[0  phi_accelbank    0           -phi_accelbank    0             -phi_accelbank  0                    phi_accelbank     0 ...
                                            -phi_accelbank    0           phi_accelbank    0              phi_accelbank  0                    -phi_accelbank 0],...
                                 'gain',1,...
                                 'dt',dt);
                             
        model.setMeasurementTimeVector((0:5499)*0.01);
                
        ft          = round(1e10*10*cumtrapz(cumtrapz(ft_roll))*dt*dt) / 1e10;
        ft          = z.Kt * (121.92 / max(ft)) * ft;        
        ft          = ft(1:10:end);
	case 'ahs lateral'
        phi_accelbank       = 25;
        t_accelbank         = 3;    % s
        t_holdbank          = 0.5;
        t_V_target          = 2;    % s

        dt = 0.001;
        model.setMeasurementTimeVector((0:55000)*dt);

        ft_roll = targetSignals2('sequence',model,...
                                 'sName','crcrcrcrcrcrcrcrc',...
                                 'sTime',[7  t_accelbank      t_holdbank  t_accelbank t_V_target    t_accelbank     t_holdbank      t_accelbank      10 ...
                                             t_accelbank      t_holdbank  t_accelbank t_V_target    t_accelbank     t_holdbank      t_accelbank      10],...
                                 'sGain',[0  phi_accelbank    0           -phi_accelbank    0             -phi_accelbank  0                    phi_accelbank     0 ...
                                            -phi_accelbank    0           phi_accelbank    0              phi_accelbank  0                    -phi_accelbank 0],...
                                 'gain',1,...
                                 'dt',dt);
                             
        model.setMeasurementTimeVector((0:5499)*0.01);
                
        ft          = round(1e10*9.81*cumtrapz(cumtrapz(ft_roll))*dt*dt) / 1e10;
        ft          = z.Kt * (121.92 / max(ft)) * ft;        
        ft          = ft(1:10:end);
        ft          = ft(1:5500);
        
	case 'ahs slalom'
        
        amp         = 10;
        n           = 5;
        wm          = (2*pi) / (model.measurementTime(end)+0.01);
        ft          = z.Kt * amp * cos(n * wm * model.measurementTime) - amp;
        
    case 'TS_10'
        n           = 10;
        wm          = (2*pi) / (model.measurementTime(end)+0.01);
        ft          = z.Kt * sin(n * wm * model.measurementTime) * pi / 180;
        endsAtZero  = false;
        
	case 'TS_20'
        n           = 20;
        wm          = (2*pi) / (model.measurementTime(end)+0.01);
        ft          = z.Kt * sin(n * wm * model.measurementTime) * pi / 180;
        endsAtZero  = false;
	case 'TS_30'
        n           = 30;
        wm          = (2*pi) / (model.measurementTime(end)+0.01);
        ft          = z.Kt * sin(n * wm * model.measurementTime) * pi / 180;
        endsAtZero  = false;
	case 'TS_40'
        n           = 40;
        wm          = (2*pi) / (model.measurementTime(end)+0.01);
        ft          = z.Kt * sin(n * wm * model.measurementTime) * pi / 180;
        endsAtZero  = false;
        
	case 'SIN2_H'
        nd          = [8 16];
        Ad          = [3.583 2.289]*pi/180;
        phase       = [0 0];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'SIN2_NH'
        nd          = [8 15];
        Ad          = [3.583 2.430]*pi/180;
        phase       = [0 0];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'SIN3_H'
        nd          = [8 16 24];
        Ad          = [3.583 2.289 1.445]*pi/180;
        phase       = [0 0 0];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'SIN3_NH'
        nd          = [8 15 25];
        Ad          = [3.583 2.430 1.370]*pi/180;
        phase       = [0 0 0];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'SIN4_H'
        nd          = [8 16 24 32];
        Ad          = [3.583 2.289 1.445 0.967]*pi/180;
        phase       = [0 0 0 0];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'SIN4_NH'
        nd          = [8 15 25 31];
        Ad          = [3.583 2.430 1.370 1.013]*pi/180;
        phase       = [0 0 0 0];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'Zaal2'
        nd          = [6 13]';
        Ad          = 5.6.*[1.562 1.092] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'Zaal3'
        nd          = [6 13 27]';
        Ad          = 5.6.*[1.562 1.092 0.493] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089 5.507];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
    case 'Zaal4'
        nd          = [6 13 27 41]';
        Ad          = 5.6.*[1.562 1.092 0.493 0.265] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089 5.507 1.734];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'Zaal5'
        nd          = [6 13 27 41 53]';
        Ad          = 5.6.*[1.562 1.092 0.493 0.265 0.178] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089 5.507 1.734 2.019];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'Zaal6'
        nd          = [6 13 27 41 53 73]';
        Ad          = 5.6.*[1.562 1.092 0.493 0.265 0.178 0.110] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089 5.507 1.734 2.019 0.441];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
	case 'Zaal7'
        nd          = [6 13 27 41 53 73 103]';
        Ad          = 5.6.*[1.562 1.092 0.493 0.265 0.178 0.110 0.070] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089 5.507 1.734 2.019 0.441 5.175];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
    case 'Zaal10'
        nd          = [6 13 27 41 53 73 103 139 194 229]';
        Ad          = 5.6.*[1.562 1.092 0.493 0.265 0.178 0.110 0.070 0.051 0.040 0.036] ./ sqrt(5) .* pi/180;
        phase       = [1.288 6.089 5.507 1.734 2.019 0.441 5.175 3.415 1.066 3.479];
        ft          = z.Kt * disturbanceSignals2('multisine',model,'nd',nd,'Ad',Ad,'phase',phase,'Td',81.92);
        endsAtZero  = false;
        
    otherwise
        error('The target signal ''%s'' does not exist.\n\tSee <a href="matlab:open standardTargetSignal">standardTargetSignal</a> for options.',name)
end

if ft(end) ~= 0 && endsAtZero
    figure
        plot(ft)
    error('The target signal does not end at 0!')
end
